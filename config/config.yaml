# ZAPPR default system configuration.
# All values can be overriden via commandline arguments
# or environment variables using the nconf module.

# IMPORTANT! Override secret with a secure value.
SESSION_SECRET: secret

# Override Github client id and secret with your
# own values as defined in your Github account.
GITHUB_CLIENT_ID: clientId
GITHUB_CLIENT_SECRET: clientSecret
GITHUB_HOOK_SECRET: captainHook
GITHUB_ACCESS_LEVELS:
  minimal:
    - user:email
    - admin:repo_hook
    - public_repo
  extended:
    - user:email
    - admin:repo_hook
    - repo
# See https://developer.github.com/v3/enterprise
# for GitHub Enterprise configuration.
GITHUB_UI_URL: https://github.com
GITHUB_API_URL: https://api.github.com

# Address of the web application host
# that ZAPPR is going to run on.
HOST_ADDR: http://localhost:8080
APP_PORT: 3000
METRICS_PORT: 3003
METRICS_ENABLED: true
NODE_ENV: development
STATIC_DIR: ./dist/client

# Database configuration
DB_NAME: zappr
DB_USER: postgres
DB_PASS: postgres
# DB_HOST: 192.168.99.100
DB_PORT: 5432

# Token encryption
# Options: [~, fake, kms]
ENCRYPTION_ENGINE: fake
# ENCRYPTION_KEY: [aws kms arn]
# KMS_REGION: eu-west-1

# HTTP logging
MORGAN_FORMAT: dev
MORGAN_THRESH: 0

# Logging level
LOG_LEVEL: debug

AUDIT_RELEVANT_ORGS: []

# path to zapprfile in repository
VALID_ZAPPR_FILE_PATHS:
  - "/.zappr.yaml"
  - "/.zappr.yml"
VALID_PR_TEMPLATE_PATHS:
  - "/.github/PULL_REQUEST_TEMPLATE"
  - "/.github/PULL_REQUEST_TEMPLATE.md"
  - "/.github/PULL_REQUEST_TEMPLATE.txt"
  - "/PULL_REQUEST_TEMPLATE"
  - "/PULL_REQUEST_TEMPLATE.txt"
  - "/PULL_REQUEST_TEMPLATE.md"
ZAPPR_DEFAULT_CONFIG:
  autobranch:
    pattern: "{number}-{title}"
    length: 60
  commit:
    message:
      patterns:
        - "#[0-9]+"
  approvals:
    minimum: 2
    ignore: none
    pattern: "^(:\\+1:|üëç)$"
    veto:
      # veto/blocking a PR = comment that matches this regex
      pattern: "^(:\\-1:|üëé)$"
  specification:
    title:
      minimum-length:
        enabled: true
        length: 8
    body:
      minimum-length:
        enabled: true
        length: 8
      contains-url: true
      contains-issue-number: true
    template:
      differs-from-body: true
  pull-request:
    labels:
      additional: true

ZAPPR_AUTOCREATED_CONFIG: |
  # this is how you configure zappr
  # a more exhaustive description is at
  # https://zappr.readthedocs.io/en/latest/setup

  # uncomment this if you want to change anything
  # approvals:
  #   by default, an approval is the thumbs up emoji only: ^:\\+1:$
  #   uncomment this line to change the approval pattern to "lgtm" at the beginning of the comment
  #   pattern: "^lgtm"

  #   by default, every pull request requires two approvals
  #   uncomment this line to change it to three
  #   minimum: 3

  #   by default, the pull request opener can approve its own pull request
  #   uncomment this line to ignore approvals from the pull request opener
  #   (there is also `last_committer` and `both`)
  #   ignore: pr_opener

  #   by default, zappr counts everyone as a valid approver
  #   uncomment these lines to change it to only collaborators
  #   (you can also specify `orgs` and `users` and define `groups`)
  #   from:
  #     collaborators: true

ZAPPR_WELCOME_BRANCH_NAME: configure-zappr
ZAPPR_WELCOME_TITLE: Configure Zappr
ZAPPR_WELCOME_TEXT: |
  This is a reduced example of a [configuration file](https://zappr.readthedocs.io/en/latest/setup) for Zappr.
  If you have questions you can reach us

    * in our [Gitter channel](https://gitter.im/zalando/zappr)
    * on [Twitter](https://twitter.com/zalando_zappr)

  These are the features we currently support:

  ## Approvals

    * Approve pull requests with comments and configurable pattern
    * "Veto" (ie. block) pull requests with comments and configurable pattern
    * Configure how many approvals your pull request needs before merging
    * Extensively configure who can approve or veto in your project

  ## Pull Request guidelines

    * Block a PR until it has the required set of labels (e.g. `reviewed`)
    * Block a PR as long as it has unfinished tasks

  ## Specification guidelines

    * Configure minimum length of pull request title and description
    * Configure if pull request description can be the same as pull request template

  ## Commit message guidelines

    * Configure patterns that all commits in a pull request must match

  ## Automatic branch creation

    * Automatically create a branch in your repository for every issue
